import os
import subprocess
from multiprocessing import Process, freeze_support
import glob
import time

# Firebase istemcisini ve CRUD fonksiyonlarÄ±nÄ± main.py iÃ§in import et
from features.database.initialize_firebase import initialize_firebase
# delete_all_documents_in_collection fonksiyonunu import et
from features.database.firestore_crud import create_document, delete_all_documents_in_collection
from firebase_admin import firestore # SERVER_TIMESTAMP iÃ§in gerekli

# Video iÅŸleme fonksiyonunu import et
from features.video_processor import process_video

# Firestore status sabitleri (streamlit_app.py ile eÅŸleÅŸmeli)
PROCESSING_STATUS_COLLECTION = "processing_status"
PROCESSING_COMPLETE_DOC_ID = "video_analysis_status"
WAGON_HISTORICAL_LOGS_COLLECTION = "wagon_fullness_history" # Yeni eklendi: Tarihsel log koleksiyon adÄ±

if __name__ == '__main__':
    freeze_support()

    # main.py iÃ§in Firebase istemcisini baÅŸlat (bu kritik)
    db = initialize_firebase()
    if not db:
        print("ğŸš¨ HATA: Firebase istemcisi main.py iÃ§inde baÅŸlatÄ±lamadÄ±. Ä°ÅŸlem durumu Firestore'a yazÄ±lamayacak.")
        exit() # Firebase baÄŸlantÄ±sÄ± olmadan devam etmeyelim

    video_files = glob.glob("data/videos/*.mp4")

    # --- ESKÄ° TARÄ°HSEL LOGLARI TEMÄ°ZLE ---
    try:
        delete_all_documents_in_collection(db, WAGON_HISTORICAL_LOGS_COLLECTION)
    except Exception as e:
        print(f"UYARI: Tarihsel loglar temizlenirken hata oluÅŸtu: {e}")
    # --- TEMÄ°ZLEME BÄ°TTÄ° ---

    # --- Ä°ÅŸlem baÅŸlangÄ±cÄ±nda 'completed' bayraÄŸÄ±nÄ± FALSE olarak ayarla ---
    try:
        create_document(db, PROCESSING_STATUS_COLLECTION, {"completed": False, "last_update_time": firestore.SERVER_TIMESTAMP}, document_id=PROCESSING_COMPLETE_DOC_ID)
        print("Firestore: Toplam video iÅŸleme baÅŸlangÄ±cÄ± iÃ§in tamamlanma bayraÄŸÄ± sÄ±fÄ±rlandÄ±.")
    except Exception as e:
        print(f"UYARI: Firestore'a baÅŸlangÄ±Ã§ bayraÄŸÄ± yazÄ±lÄ±rken hata oluÅŸtu: {e}")
    # --- DURUM SIFIRLAMA BÄ°TTÄ° ---


    print("ğŸ§µ Video iÅŸleme sÃ¼reÃ§leri baÅŸlatÄ±lÄ±yor...")
    processes = []

    for video_file in video_files:
        p = Process(target=process_video, args=(video_file,))
        p.start()
        processes.append(p)



    # Video iÅŸleme sÃ¼reÃ§lerinin tamamlanmasÄ±nÄ± bekle
    for p in processes:
        p.join()

    print("âœ… TÃ¼m video iÅŸleme tamamlandÄ±.")

    # --- Ä°ÅŸlem tamamlandÄ±ktan sonra 'completed' bayraÄŸÄ±nÄ± TRUE olarak ayarla ---
    try:
        create_document(db, PROCESSING_STATUS_COLLECTION, {"completed": True, "last_completion_time": firestore.SERVER_TIMESTAMP}, document_id=PROCESSING_COMPLETE_DOC_ID)
        print("Firestore: TÃ¼m video iÅŸleme tamamlandÄ± bayraÄŸÄ± ayarlandÄ±.")
    except Exception as e:
        print(f"UYARI: Firestore'a tamamlama bayraÄŸÄ± yazÄ±lÄ±rken hata oluÅŸtu: {e}")
    # --- DURUM AYARLAMA BÄ°TTÄ° ---